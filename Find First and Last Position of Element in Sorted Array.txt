Find First and Last Position of Element in Sorted Array
==========================================================

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

Constraints:

*) 0 <= nums.length <= 10^5
*) -10^9 <= nums[i] <= 10^9
*) nums is a non-decreasing array.
*) -10^9 <= target <= 10^9

==============SOLUTION===========
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var searchRange = function(nums, target) {

    var start=0;
    var end= nums.length-1;
    var ans = [];
    var st=-1;
    var mid;

    while(start<=end){
        mid = Math.floor((start + end) / 2);
        if (target == nums[mid]) {
            st = mid;
            end = mid - 1;
        } else if (target < nums[mid]) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
    }
    ans.push(st);

    start=0;
    end= nums.length-1;
    var en=-1;

     while(start<=end){
        mid = Math.floor((start + end) / 2);
        if (target == nums[mid]) {
            en = mid;
            start = mid + 1;
        } else if (target < nums[mid]) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
        
    }ans.push(en);
    return ans;

    
};